import dash
from dash import html, dcc, Input, Output
import pandas as pd
import numpy as np

# Initialize the Dash app
app = dash.Dash(__name__)

# Create a more interesting pandas DataFrame
np.random.seed(42)
num_rows = 20
years = np.random.choice([2020, 2021, 2022, 2023], num_rows)
categories = np.random.choice(['A', 'B', 'C', 'D'], num_rows)
values1 = np.random.rand(num_rows) * 100
values2 = np.random.rand(num_rows) * 50
values3 = np.random.rand(num_rows) * 75

df = pd.DataFrame({
    'Year': years,
    'Category': categories,
    'Value1': values1,
    'Value2': values2,
    'Value3': values3
})
df.sort_values(by=['Year', 'Category'], inplace=True)

# Get unique categories for the dropdown
unique_categories = df['Category'].unique()

# Define the app layout
app.layout = html.Div([
    html.H1(children='My Enhanced Dash Application'),

    html.Div(children='''
        Dash: A web application framework for your data, now with more features!
    '''),

    html.Hr(),

    html.H3(children='Bar Chart (Aggregated Value1 by Year for All Categories)'),
    dcc.Graph(
        id='bar-chart'
        # Figure will be generated by a callback or directly if static for this example
        # For simplicity, let's make this one static for now, aggregating data
    ),

    html.Hr(),

    html.H3(children='Interactive Line Chart'),
    html.Label('Select Category:'),
    dcc.Dropdown(
        id='category-dropdown',
        options=[{'label': i, 'value': i} for i in unique_categories],
        value=unique_categories[0]  # Default value
    ),
    dcc.Graph(id='line-chart'),

    html.Hr(),
    html.H3(children='Original Example Bar Chart (for comparison)'),
    dcc.Graph(
        id='example-graph', # Original graph
        figure={
            'data': [
                {'x': [1, 2, 3], 'y': [4, 1, 2], 'type': 'bar', 'name': 'SF'},
                {'x': [1, 2, 3], 'y': [2, 4, 5], 'type': 'bar', 'name': u'Montr√©al'},
            ],
            'layout': {
                'title': 'Original Dash Data Visualization'
            }
        }
    )
])

# Callback to update the bar chart (using the new DataFrame)
# For this example, let's make the first bar chart show aggregated Value1 by Year
@app.callback(
    Output('bar-chart', 'figure'),
    [Input('category-dropdown', 'value')] # Even if not used, a dummy input to trigger once or make it dynamic later
)
def update_bar_chart(selected_category_dummy_arg): # Argument not used, but required by Dash
    # Aggregate Value1 by Year
    bar_df = df.groupby('Year')['Value1'].sum().reset_index()
    figure = {
        'data': [
            {'x': bar_df['Year'], 'y': bar_df['Value1'], 'type': 'bar', 'name': 'Total Value1'},
        ],
        'layout': {
            'title': 'Total Value1 by Year (All Categories)',
            'xaxis': {'title': 'Year'},
            'yaxis': {'title': 'Total Value1'}
        }
    }
    return figure

# Callback to update the line chart based on dropdown selection
@app.callback(
    Output('line-chart', 'figure'),
    [Input('category-dropdown', 'value')]
)
def update_line_chart(selected_category):
    filtered_df = df[df['Category'] == selected_category]

    figure = {
        'data': [
            {'x': filtered_df['Year'], 'y': filtered_df['Value2'], 'type': 'line', 'name': f'Value2 for {selected_category}'},
            {'x': filtered_df['Year'], 'y': filtered_df['Value3'], 'type': 'line', 'name': f'Value3 for {selected_category}', 'yaxis': 'y2'}
        ],
        'layout': {
            'title': f'Line Chart for Category: {selected_category}',
            'xaxis': {'title': 'Year'},
            'yaxis': {'title': 'Value2'},
            'yaxis2': {
                'title': 'Value3',
                'overlaying': 'y',
                'side': 'right'
            },
            'legend': {'x': 0, 'y': 1.1, 'orientation': 'h'} # Adjust legend position
        }
    }
    return figure

# Main execution block
if __name__ == '__main__':
    app.run(debug=True)
